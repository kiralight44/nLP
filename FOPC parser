class FOPCParser:
    def __init__(self, expression):
        self.expression = expression

    def parse(self):
        tokens = self.tokenize(self.expression)
        return self._parse_expression(tokens)

    def tokenize(self, expression):
        return expression.replace('(', ' ( ').replace(')', ' ) ').split()

    def _parse_expression(self, tokens):
        if not tokens:
            raise ValueError("Empty expression")

        token = tokens.pop(0)

        if token == '(':
            sub_expr = []
            while tokens[0] != ')':
                sub_expr.append(self._parse_expression(tokens))
            tokens.pop(0)  # Remove ')'
            return sub_expr
        elif token.isalpha():  # Variable or predicate
            return token
        else:
            raise ValueError(f"Unexpected token: {token}")

if __name__ == "__main__":
    expression = "(P(x) ∧ Q(y)) → R(z)"
    parser = FOPCParser(expression)
    parsed_expression = parser.parse()

    print("Parsed Expression:", parsed_expression)
